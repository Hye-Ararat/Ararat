// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(cuid()) @unique
  firstName       String
  lastName        String
  email           String            @unique
  username        String            @unique
  password        String
  language        String?
  permissions     Permission[]
  instances       InstanceUser[]
  NodeUser        NodeUser[]
  imageServerPermissions ImageServerPermission[]
}

model Permission {
  id         String @id @default(cuid()) @unique
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  permission String
}

model ImageServer {
  id         String     @id @default(cuid()) @unique
  name        String
  url         String
  permissions ImageServerPermission[]
}


model ImageServerPermission {
  id        String   @id @default(cuid()) @unique
  imageServer ImageServer @relation(fields: [imageServerId], references: [id], onDelete: Cascade)
  imageServerId String
  user User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  permission String
}

model NodePermission {
  id         String   @id @default(cuid()) @unique
  user       NodeUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  permission String
}

model NodeUser {
  id          String           @id @default(cuid()) @unique
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  node        Node             @relation(fields: [nodeId], references: [id], onDelete: Cascade)
  nodeId      String
  permissions NodePermission[]
}

model Location {
    id          String     @id @default(cuid()) @unique
    name String
    nodes Node[]
}

model Node {
  id          String     @id @default(cuid()) @unique
  name        String
  url         String @unique
  location   Location           @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId String
  instances   Instance[]
  users       NodeUser[]
}

model Instance {
  id     String         @id @default(cuid())  @unique
  name   String
  node   Node           @relation(fields: [nodeId], references: [id], onDelete: Cascade)
  nodeId String
  users  InstanceUser[]
}

model InstanceUser {
  id          String                   @id @default(cuid()) @unique
  user        User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  instance    Instance                 @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId  String
  permissions InstanceUserPermission[]
  widgetGrids InstanceUserWidgetGrid[]
}

model InstanceUserPermission {
  id             String       @id @default(cuid()) @unique
  instanceUser   InstanceUser @relation(fields: [instanceUserId], references: [id], onDelete: Cascade)
  instanceUserId String
  permission     String
}

model InstanceUserWidgetGrid {
  id             String               @id @default(cuid()) @unique
  direction      String
  index          Int                  @default(sequence())
  size           String
  instanceUser   InstanceUser         @relation(fields: [instanceUserId], references: [id], onDelete: Cascade)
  instanceUserId String
  widgets        InstanceUserWidget[]
}

model InstanceUserWidget {
  id           String                 @id @default(cuid()) @unique
  index        Int                    @default(sequence())
  widget       String
  widgetGridId String
  size         String
  widgetGrid   InstanceUserWidgetGrid @relation(fields: [widgetGridId], references: [id], onDelete: Cascade)
}
