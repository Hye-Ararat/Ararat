generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id      String  @id @unique @default(uuid())
  name    String
  logoUrl String?
  users   User[]
}

model User {
  id             String       @id @unique @default(uuid())
  email          String       @unique
  password       String?
  name           String?
  authProvider   String
  roles          Role[]
  permissions    Permission[]
  organization   Organization @relation(references: [id], fields: [organizationId])
  organizationId String
}

model Permission {
  id         String  @id @unique @default(uuid())
  scope      String
  resourceId String?
  permission String
  user       User    @relation(fields: [userId], references: [id])
  userId     String
}

model Role {
  id              String           @id @unique @default(uuid())
  scope           String
  resourceId      String?
  user            User?            @relation(fields: [userId], references: [id])
  userId          String?
  rolePermissions RolePermission[]
}

model RolePermission {
  id         String @id @unique @default(uuid())
  permission String
  role       Role   @relation(fields: [roleId], references: [id])
  roleId     String
}

model Location {
  id          String @id @unique @default(uuid())
  name        String
  countryCode String
  racks       Rack[]
}

model Rack {
  id          String     @id @unique @default(uuid())
  name        String
  description String?
  location    Location   @relation(fields: [locationId], references: [id])
  locationId  String
  agents      Agent[]
  units       RackUnit[]
}

model Agent {
  id             String           @id @unique @default(uuid())
  name           String
  description    String?
  hostname       String
  port           Int
  sftpPort       Int
  rack           Rack             @relation(fields: [rackId], references: [id])
  rackId         String
  physicalServer PhysicalServer[]
}

model RackUnit {
  id               String          @id @unique @default(uuid())
  name             String
  unit             Int
  rack             Rack            @relation(fields: [rackId], references: [id])
  rackId           String
  physicalServers  PhysicalServer? @relation(fields: [physicalServerId], references: [id])
  switch           Switch?         @relation(fields: [switchId], references: [id])
  pdu              PDU?            @relation(fields: [pduId], references: [id])
  physicalServerId String?
  switchId         String?
  pduId            String?
}

model PhysicalServerInventoryItem {
  id               String         @id @unique @default(uuid())
  physicalServer   PhysicalServer @relation(fields: [physicalServerId], references: [id])
  component        String
  model            String?
  brand            String?
  speed            String?
  size             String?
  serial           String?
  type             String?
  physicalServerId String
}

model PhysicalServer {
  id           String                        @id @unique @default(uuid())
  name         String
  manufacturer String?
  model        String?
  hostname     String?
  agent        Agent?                        @relation(fields: [agentId], references: [id])
  agentId      String?
  ipmiIp       String?
  ipmiUser     String?
  ipmiPassword String?
  pxeMac       String?
  units        RackUnit[]
  inventory    PhysicalServerInventoryItem[]
}

model Switch {
  id            String     @id @unique @default(uuid())
  units         RackUnit[]
  snmpIp        String?
  snmpPort      Int?
  snmpCommunity String?
  snmpVersion   String?
  name          String
  model         String?
  manufacturer  String?
}

model PDU {
  id            String     @id @unique @default(uuid())
  units         RackUnit[]
  snmpIp        String?
  snmpPort      Int?
  snmpCommunity String?
  snmpVersion   String?
  name          String
  model         String?
  manufacturer  String?
}
